module Server where

main :: IO ()
main = undefined


import qualified Network as N
import qualified Control.Proxy as CP
import qualified Control.Proxy.TCP as CPT
import qualified Control.Monad as CM
import qualified Data.List as DL
import qualified Data.Maybe as DM

import qualified Data.Text as T
import qualified Data.Text.Encoding as DTE
import qualified Data.Text.Encoding.Error as DTEE

import qualified Data.ByteString as DB

import qualified Command as C

--type InterpreterText c = T.Text -> c
type InterpreterBinary c = DB.ByteString -> c

--type HandlerText c = () -> Pipe ProxyFast c (Output T.Text) IO ()
type HandlerBinary c = () -> Pipe ProxyFast c (Output DB.ByteString) IO ()

runText :: InterpreterText c -> HandlerText c -> String -> IO ()
runText interpreter handler port = serve HostAny port go
  where go (socket,_) = runProxy $ server interpreter handler socket

--runBinary :: InterpreterBinary c -> HandlerBinary c -> String -> IO ()
--runBinary interpreter handler port = serve HostAny port go
--  where go (socket,_) = runProxy $ server interpreter handler socket

serverText :: InterpreterText c -> HandlerText c -> Socket -> () -> Session ProxyFast IO ()
serverText i h s = readSocket >-> interpret >-> handle >-> writeSocket
  where
    readSocket = socketReadS 4096 s >-> decode >-> split "rn"
    decode = mapD $ decodeUtf8With lenientDecode
    writeSocket = mapD encodeUtf8 >-> socketWriteD s >-> done
    done () = forever $ request () >> return ()
    interpret = mapD i

--serverBinary :: InterpreterBinary c -> HandlerBinary c -> Socket -> () -> Session ProxyFast IO ()
--serverBinary i h s = readSocket >-> interpret >-> handle >-> writeSocket
--  where
--    readSocket = socketReadS 4096 s >-> decode >-> split "rn"
--    decode = mapD $ decodeUtf8With lenientDecode
--    writeSocket = mapD encodeUtf8 >-> socketWriteD s >-> done
--    done () = forever $ request () >> return ()
--    interpret = mapD i


